<!DOCTYPE html>
<html>
  <head>
    <title><%- title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `link` tags, or asynchronously
        on the client using a solution like AMD (RequireJS).  Or, if you like, you can
        take advantage of Sails' boilerplate asset management.

        By default, stylesheets from your `assets/linker/styles` folder are included
        here automatically.  Both CSS (.css) and LESS (.less) are supported.
        In production, your styles will be minified and concatenated into a single file.
        
        To customize any part of the built-in behavior, just edit your Gruntfile.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <link rel="icon" href="/linker/favicon.png" type="image/x-icon">
    <!--STYLES-->
    <link rel="stylesheet" href="/linker/styles/bootstrap-switch.css">
    <link rel="stylesheet" href="/linker/styles/bootstrap/css/bootstrap-responsive.min.css">
    <link rel="stylesheet" href="/linker/styles/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="/linker/styles/font-awesome.css">
    <link rel="stylesheet" href="/linker/styles/ionicons.css">
    <link rel="stylesheet" href="/linker/styles/jquery.noty.css">
    <link rel="stylesheet" href="/linker/styles/noty_theme_default.css">
    <link rel="stylesheet" href="/linker/styles/vm-custom.css">
    <link rel="stylesheet" href="/linker/styles/select2.css">
    <link rel="stylesheet" href="/linker/styles/style-default.css">
    <link rel="stylesheet" href="/linker/styles/style-theme.css">
    
    <!--STYLES END-->
    <script type="text/javascript">
function addLoadEvent(func) {
  var oldonload = window.onload;
  if (typeof window.onload != 'function') {
    window.onload = func;
  } else {
    window.onload = function() {
      if (oldonload) {
        oldonload();
      }
      func();
    }
  }
}
</script>
  </head>

  <body class="page blog">
    <%- partial('partials/navbar')%>
    <%- partial('partials/breadcrumb')%>
    <div class="container">
        <div class="row-fluid">
            <%- body %>
        </div>        
    </div>




    <!--
        Client-side Templates
        ========================

    		HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/linker/templates` folder, then
        include them here automatically.
        
        To customize this behavior to fit your needs, just edit your Gruntfile.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your templates using a server-side stringfile
              before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' boilerplate asset management.

      By default, filesin your `assets/linker/js` folder are included here
      automatically.  Both JavaScript (.js) and CoffeeScript (.coffee) are supported.
      In production, your scripts will be minified and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit your Gruntfile.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/linker/js/jquery.js"></script>
    <script src="/linker/js/jquery.tmpl.js"></script>
    <script src="/linker/js/underscore-min.js"></script>
    <script src="/linker/js/underscore.string.min.js"></script>
    <script src="/linker/js/strobe-custom.js"></script>
    <script src="/linker/js/select2.min.js"></script>
    <script src="/linker/js/socket.io.js"></script>
    <script src="/linker/js/sails.io.js"></script>
    <script src="/linker/js/app.js"></script>
    <script src="/linker/js/bootstrap.min.js"></script>
    <script src="/linker/js/lib/daterangepicker.js"></script>
    <script src="/linker/js/lib/holder.js"></script>
    <script src="/linker/js/lib/jquery.dataTables.min.js"></script>
    <script src="/linker/js/lib/jquery.dataTables.paging.js"></script>
    <script src="/linker/js/lib/jquery.dataTables.rowReordering.js"></script>
    <script src="/linker/js/lib/jquery.number.js"></script>
    <script src="/linker/js/lib/jquery.slimscroll.min.js"></script>
    <script src="/linker/js/lib/jquery.switch.js"></script>
    <script src="/linker/js/lib/jquery.twbsPagination.min.js"></script>
    <script src="/linker/js/lib/jquery.validate.min.js"></script>
    <script src="/linker/js/lib/moment.min.js"></script>
    <script src="/linker/js/lib/select2.min.js"></script>
    <script src="/linker/js/lib/trunk8.js"></script>
    <script src="/linker/js/lib/vm-custom.js"></script>
    <script src="/linker/js/lib/vm-plugins.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
<script type="text/javascript">
$(document).ready(function () {
    console.log("Layout"); 
    $.Topic("LoadingImage").subscribe(HandleLoadingImage);
    $.Topic("ModalAction").subscribe(HandleModalProgress);  
});
</script>